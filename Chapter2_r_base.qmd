---
title: "Chapter2"
author: "Rchemist"
format: 
  html:
    toc: true
    toc-depth: 2
editor: source
---

## 1. R 기초 개념

### 1) object(객체)

R에서 object란 특정한 이름으로 데이터를 저장한 값을 의미합니다.

#### a. object의 생성

R에서 object의 생성은 `<-` 또는 `=` 를 통해 이루어집니다. 예를 들면 아래와 같습니다.

> LHS \<- RHS
>
> A = B

`<-`를 기준으로 왼쪽의 값(A)이 object의 이름이고 오른쪽(B)이 object가 갖게 되는 또는 object에 저장되는 데이터입니다.

#### b. object의 생성과 출력 {#sec-object}

object를 생성한다는 것은 특정 데이터를 [특정한 이름으로 **저장**]{.underline}하는 것입니다.

`A <- B` 를 사용해 데이터를 생성하면 A라는 object에는 B라는 데이터가 저장됩니다.

```{r}
a <- 'Welcome to R!'
```

위에서는 'Welcome to R!'이라고 하는 문자를 `a`라고 하는 object 로 생성한 것입니다.

반면 object의 출력은 생성한 object 에 [저장되어 있는 데이터를 확인]{.underline}하는 것입니다.

object를 생성한다고 해서 그 값이 출력되지는 않습니다.

우리가 만든 object를 확인하기 위해서는 object의 이름을 실행하거나, 출력하는 함수를 사용해야 합니다.

```{r}
a 
# 또는
print(a)
```

만약 object를 생성함과 동시에 그 object를 출력하고 싶다면 아래와 같이 실행하면 됩니다.

```{r}
a <- 'Welcome to R!'; print(a)
```

한 가지 반드시 짚고 넘어가야 할 것이 있습니다. 비록 object 이름이 데이터와 같다고 해도, 따옴표가 붙은 것은 object 이름이 아니라는 것입니다.

```{r}
aa <- 'aa'
```

위의 사례에서 알 수 있듯이, `aa`는 `'aa'`라는 값을 갖는 object 입니다. `'aa'`와 `aa`는 구분되어야 합니다.

------------------------------------------------------------------------

### 2) 함수

R에서 함수란 특정한 기능을 수행하는 명령어입니다. 보통 "\~을 한다" 처럼 우리말의 동사라고 이해하면 쉽습니다.

#### a. 함수 사용법

R에서 함수는 일반적으로 `()`가 붙습니다.

```{r}
print <- '프린트' # 프린트라는 값을 갖는 object
print('dd') # 'dd'를 출력하는 함수
```

위의 예시에서 `print`는 '프린트'라는 문자를 갖는 [object]{.underline}인 반면, `print()`는 특정 object를 출력하는 [함수]{.underline}입니다.

물론 함수의 이름으로도 object를 만들 수 있습니다. 그러나 이럴 경우, 분석 과정에서 이름을 혼동하는 경우가 발생할 수 있기 때문에, 나중을 생각한다면 그렇게 권장하는 방법은 아닙니다. 따라서 [**object의 이름은 함수명이 아닌 다른 이름으로**]{.underline} 만드시는 것을 추천합니다.

::: callout-tip
## object 이름 짓는 방법

R 뿐만 아니라 프로그래밍 언어에는 일반적으로 영어를 활용하여 object 이름을 붙여줍니다.

다양한 방법들이 있겠으나, 추천드리는 방법은 다음과 같습니다. 우선 띄어쓰기가 필요없는 하나의 단어로 object 이름을 지어주는 것은 말그대로 영어단어를 사용해주면 됩니다.

```{r}
result <- 'the result'
```

하나의 단어를 뛰어 넘어 여러 개의 단어를 붙여 써야 하는 경우에는 아래의 방법 중 원하는 방식을 사용하시면 됩니다.

-   myResult

-   my_result

-   my.result

:::

#### b. 함수 도움말

R에서는 각 함수가 어떤 기능을 하고, 어떤 옵션을 취할 수 있는지 확인할 수 있습니다. 함수 이름 앞에 `?`를 붙여서 실행해보면 도움말 창이 실행됩니다.

```{r}
?print()
```

#### c. 함수 내 인자(argument)

한편 함수 내부에서 특정 값을 줌으로써, 출력 결과와 같은 옵션을 설정해줄 수 있습니다. 그것을 인자(argument)라고 부릅니다.

```{r}
nums <- c(1.3314, 3.4124, 19.7907)
print(nums, digits=2)
```

위의 예시에서는 `print()`라는 함수 안에 digits라는 인자를 설정하여, 소숫점 둘째자리까지 출력되도록 조정해주었습니다.

각 함수마다 각기 다른 인자를 갖고 있으니, 필요한 경우, 도움말 기능을 이용하여 사용 가능한 인자를 확인해보시기 바랍니다.

------------------------------------------------------------------------

### 3) 작업 경로 (working directory, WD)

작업경로란 현재 내가 데이터 분석을 진행하고 있는 위치를 의미합니다.

작업경로와 관련된 함수는 크게 2가지가 있습니다.

-   `getwd()` 현재 내 작업경로를 확인(get)합니다.

-   `setwd()` 작업경로를 특정한 곳으로 변경(set)합니다.

    ```{r}
    #| eval: false
    # 현재 작업경로에 없는 파일을 불러오는 방법
    # 1)  작업 경로와 파일 명을 동시에 사용.
    read.csv('csv/file1.csv')

    # 2) setwd()를 통한 작업경로 변경
    setwd('csv/')
    read.csv('file1.csv')
    ```

작업경로를 설정하는 이유는 외부 데이터 파일(e.g., .csv) 을 불러올 때, 그 파일이 있는 경로가 필요하기 때문입니다.

------------------------------------------------------------------------

### 4) 패키지 (packages)

R에서 패키지란 [**특정 함수들을 포함하고 있는 함수 세트**]{.underline} 라고 할 수 있습니다.

데이터 분석에 필요한 패키지들을 설치한 뒤 그 패키지를 불러 들여와야 사용할 수 있습니다.

#### a. 패키지 설치

패키지의 설치는 `install.packages()` 함수로 실시합니다.

```{{r}}
#| eval: false
install.packages('dplyr')
```

위와 같이 설치하고자 하는 패키지를 `install.packages()` 함수 안에 [따옴표가 붙은 문자 형태]{.underline}로 넣어주어야 합니다.

#### b. 패키지 불러오기

설치한 패키지는 내 PC의 R 패키지 저장소에 저장됩니다. 이 패키지를 사용하기 위해서는 `library()` 또는 `require()` 함수를 이용합니다.

```{r}
#| eval: false
library(dplyr)
# 또는
require(dplyr)
```

`library()` 또는 `require()` 함수 안에 패키지 이름을 [object 형태]{.underline}로 넣어주어야 합니다.

사실 패키지 이름을 입력할 때, 따옴표를 사용해 문자로 넣어주어도 가능합니다. 그러나 문자열로 넣게 된다면 [자동완성기능]{.underline}을 활용할 수 없게 됩니다. 그렇기 때문에 패키지의 이름을 전부 입력해야만 하죠. 따라서 가급적이면 따옴표를 사용하지 않는 것을 추천합니다.

패키지를 성공적으로 불러왔다면, 패키지에 있는 함수들을 활용할 수 있게 됩니다.

물론 패키지를 불러오지 않고 (`library()`나 `require()`를 이용하지 않고) 패키지 내의 함수를 사용하는 방법이 있긴 합니다.

```{r}
#| eval: false
dplyr::select('column 이름') 
```

위의 코드처럼 `패키지명::함수명` 의 방식을 이용한다면 패키지 내에 있는 함수들을 사용할 수 있습니다.

그러나 매번 `패키지명::`을 이용해 함수를 이용하는 것보다 `library()` 함수를 한 번 실행하고 바로 이용하는 것이 훨씬 효율적이겠죠?

::: callout-note
## `library()`와 `require()`의 차이

`library()`는 불러오고자 하는 패키지가 없으면 에러 메시지(Error)가 나오지만, `require()`는 경고 메시지(Warning message)가 뜹니다.

R에서는 경고 메시지가 뜨더라도 실행은 되었지만, 에러 메시지가 뜨는 것은 실행되지 못했다는 것을 의미합니다.

```{r}
#| eval: false
library(abcdef)
```

``` {style="color: red"}
Error in library(abcdef) : there is no package called 'abcdef'
```

```{r}
#| eval: false
require(xyz)
```

```         
Warning: there is no package called ‘xyz’
```
:::

------------------------------------------------------------------------

## 2. 데이터의 유형

R에서 가장 기본적으로 활용되는 데이터의 유형 (type)에 대해 알아보도록 하겠습니다.

R의 기본적인 데이터의 유형은 크게 `numeric`, `charcter`, `factor`, `logical` 이 있습니다.

### 1) numeric

`numeric`은 이름에서 알 수 있듯이 숫자 데이터입니다. `numeric`은 정수와 실수를 모두 포함합니다. R에서 정수는 `integer`, 실수는 `double`로 표현됩니다.

#### a. integer

우리가 생각하는 정수는 흔히 소숫점이 없는 숫자입니다. 그러나 R에서는 단순히 숫자에 소수점이 없다고 해서 `integer`로 인식하지 않습니다.

```{r}
#| eval: false
is.integer(1) # FALSE
class(1) # numeric
is.integer(1L)
class(1L)
```

위의 코드로 봤을 때, 단순한 `1`은 `integer`가 아니라 `numeric`입니다.

R에서 `integer`를 사용하기 위해선 숫자 뒤에 `L`을 붙여주어야 합니다.

#### b. double

우리가 알고 있는 실수는 소수점이 있는 숫자입니다. 그러나 R에서는 앞서 살펴 보았듯, `L`이 붙어 `integer`로 지정된 숫자가 아니라면 모두 실수라고 할 수 있습니다.

```{r}
#| eval: false
is.numeric(1) #TRUE
is.double(1) #TRUE
is.double(1L) # FALSE
is.double(3.14) # TRUE
```

R에서 1이라는 숫자는 `double`이기도 하면서 동시에 `numeric`입니다. 또한 소수점이 들어가는 숫자의 유형을 확인해보면 `double`이 아니라 `numeric`이라는 것을 알 수 있습니다.

즉, `numeric`이 숫자데이터에서 가장 상위의 개념이고 그 하위 개념으로 `double` 과 `integer` 가 있다고 이해하시면 쉽습니다.

```{r echo=FALSE}
require(ggplot2)
require(ggforce)
temp <- data.frame(x=c(100,300,200),
                   y=c(250,250,250),
                   r=c(80,80,200),
                   y_label=c(250,250,450),
                   label = c('integer','double','numeric'))
ggplot(temp) + 
  geom_circle(aes(x0=x,y0=y,r=r, fill=label),alpha=.2) +
  coord_fixed()+
  geom_label(data=temp,aes(x=x,y=y_label,label=label))+
  theme_void()+
  labs(title='    숫자유형 데이터의 관계')+
  theme(legend.position='none')

```

그러나 R에서 이 둘을 구분해서 사용하는 경우는 흔하지 않습니다. 모든 숫자 데이터는 `numeric`으로 사용하셔도 상관없습니다.

### 2) character

`character`는 큰 따옴표(`""`) 또는 작은 따옴표(`''`)가 붙은 문자 데이터를 의미합니다.

```{r}
chr <- 'character'
chr
```

앞서 @sec-object 의 object 부분에서 말씀드렸듯이, 'character' 라는 문자 데이터이고, `chr`는 'character' 값을 갖는 object입니다. `chr` 와 `'chr'`을 헷갈리지 마시기 바랍니다.

### 3) factor

`factor`는 다른 데이터의 유형과 달리 순서 (level)를 갖는 데이터 유형입니다.

```{r}
vec_num <- 1:10
vec_fac <- factor(1:10)
class(vec_fac) # factor
print(vec_fac) 
```

`vec_num`과 `vec_fac`은 모두 1부터 10까지의 데이터를 갖고 있습니다. 그러나 `vec_num`과 달리 `vec_fac`을 출력했을 때, `Levels`도 함께 출력되는 것을 확인할 수 있습니다.

만약 임의로 `factor` 변수의 level을 변경하고 싶다면 아래와 같이 `factor` 함수 안에 `levels` 부분을 수정해주면 됩니다.

```{r}
vec_fac2 <- factor(1:10, levels=c(1,3,5,7,9,10,8,6,4,2))
print(vec_fac2)
```

`vec_fac`과 `vec_fac2`의 levels가 다른 것을 확인할 수 있습니다.

### 4) logical

`logical`은 단어에서 알 수 있듯 논리형 데이터 입니다. 쉽게 말하면 참(`TRUE`)인지 거짓(`FALSE`)인지를 나타내는 데이터 유형입니다.

```{r}
class(TRUE) #  logical
TRUE
FALSE
T
F
```

R에서 `TRUE` 와 `FALSE` 는 각각 `T` 와 `F`로 줄여쓸 수 있습니다.

::: callout-note
## 연속형 변수 vs 범주형 변수

연속형 변수(Continuous variable): `numeric`, `integer`, `double`

범주형 변수(Categorical variable): `character`, `factor`
:::

------------------------------------------------------------------------

## 3. 데이터의 구조

앞서서 데이터의 유형에 배워봤다면, 이번에는 데이터가 어떤 형태로 존재하는지 알아볼 차례입니다.

R에서 가장 많이 활용되는 4가지의 데이터 구조, 벡터(`vector`), 매트릭스(`matirx`), 데이터프레임(`data.frame`), 그리고 리스트(`list`)를 배워보도록 하겠습니다.

### 1) 벡터

벡터는 하나 이상의 값을 갖는 1차원 구조의 데이터입니다. 가장 단순하지만, 또 데이터 분석에 많이 활용되는 데이터 구조 중 하나입니다.

보통 벡터를 생성할 때는 `c()` 를 이용해 생성합니다. `c()`는 'concatenate(합치다)'의 약자입니다.

```{r}
vec1 <- c(1,2,3); vec1
vec2 <- c('a','b','c'); vec2
```

`vec1`은 숫자 데이터(numeric)를 갖는 벡터이고 `vec2`는 문자 데이터(character)를 갖는 벡터입니다.

여러 유형의 데이터를 갖는 벡터인 경우, 하나라도 문자(character) 또는 벡터가 있는 경우, 전부 그 유형의 데이터를 갖는 벡터로 저장됩니다.

```{r}
vec3 <- c(1,2,3,'a',5,6)
vec3
```

`vec3`를 선언할 때는 1,2,3 과 같은 숫자가 들어갔지만, `vec3`를 출력해보면 따옴표가 붙은 character인 것을 알 수 있습니다.

만약 숫자 데이터와 논리 데이터를 하나로 묶으면 어떻게 될까요?

```{r}
vec4 <- c(1,2,3,TRUE, FALSE)
vec4
```

일반적으로 논리형 데이터는 컴퓨터 언어에서 `TRUE`가 1을, `FALSE`는 0을 의미합니다. 따라서 숫자 데이터와 함께 벡터로 만드는 경우, 숫자로 표현되게 됩니다.

::: callout-note
## R의 시작 인자

R은 다른 프로그래밍 언어와 달리, 인자(index)의 시작 숫자가 0이 아닌 1입니다. 즉, 첫번째 값은 1로 선택할 수 있습니다.
:::

### 2) matrix

매트릭스는 2차원 구조의 데이터입니다. 수학시간에 배웠던 행렬이라고 이해하시면 쉽습니다.

R에서 `matrix`를 생성하는 함수는 `matrix()`입니다.

```{r}
mat <- matrix(1:12)
mat2 <- matrix(1:12, nrow=3) # 행의 개수: 3
mat3 <- matrix(1:12, ncol=3) # 열의 개수: 3
mat4 <- matrix(1:12, ncol=3, byrow=T)
```

`matrix()` 함수에서는 행 또는 열의 개수를 지정해줄 수 있습니다.

-   `nrow` : 행의 개수 지정

-   `ncol`: 열의 개수 지정

-   `byrow`: 매트릭스의 입력 순서를 행 방향으로 진행할지 여부

`byrow`인자는 `matrix`의 입력 순서를 행의 방향으로 설정해주는 것입니다. 초기에는 `matrix`가 열 방향(위에서 아래로 (↓))이었다면, `byrow`를 통해 `matrix`의 값들을 행 방향 (좌에서 우로 (→))으로 입력할 수 있습니다.

### 3) data.frame

데이터프레임은 2차원 구조의 데이터로서, 앞으로 R을 활용해 데이터분석을 할 때, 가장 많이 활용되는 데이터 구조입니다.

데이터프레임은 matrix와 동일한 2차원 형태지만 몇 가지 다른 점이 있습니다.

-   매트릭스와 달리, `$` 기호를 이용해 column 이름으로 호출 가능합니다.

-   각 열(column)별로 다른 데이터 유형을 가질 수 있습니다.

데이터프레임은 앞으로 가장 많이 사용할 데이터 구조이기 때문에 이후에 더 다뤄보도록 하겠습니다.

### 4) list

`list`는 다른 데이터 구조들과는 다릅니다.

-   데이터프레임의 열(column)처럼 데이터마다 이름을 가질 수 있습니다.

-   각 이름마다 다른 유형, 다른 구조의 데이터를 가질 수 있습니다.

-   각 이름마다 길이가 다른 데이터를 가질 수 있습니다.

```{r}
l <- list()
l$a <- 1:5
l$b <- LETTERS # 알파벳 대문자
l$c <- matrix(1:20,nrow=4, byrow=T)
l$d <- data.frame(a=1:5, b=letters[1:5])
l
```

위의 코드를 보면, `l`이라고 하는 리스트에는 `a`라는 이름을 갖는 데이터와 `b`라는 이름을 갖는 데이터가 존재합니다.

또한 `a`는 1부터 5까지의 숫자 유형의 벡터를 갖는 반면, `b`는 알파벳 대문자의 문자 유형의 벡터를, `c`는 4행 5열의 매트릭스를, 마지막으로 `d`는 데이터프레임을 갖습니다.

------------------------------------------------------------------------

## 4. 연산자

### 1) 산술 연산자

산술연산자는 숫자를 계산하는 데 사용되는 연산자를 말합니다. 우리가 잘 아는 덧셈(+), 뺄셈(-), 곱셈(\*), 나눗셈(/) 등의 연산자가 있습니다.

### 2) 논리 연산자

논리 연산자는 참(`TRUE`)과 거짓(`FALSE`)를 반환하는 연산자들을 의미합니다. 보통 LHS와 RHS의 값을 비교할 때 사용하는 연산자입니다.

연산 결과가 맞는 경우는 TRUE를, 그렇지 않은 경우는 FALSE를 반환합니다.

논리 연산자는 주로 [데이터프레임과 함께 특정 조건을 만족하는 행을 찾아]{.underline}낼 때 사용합니다.

-   `A == B`: 같음

```{r}
10 == 10
```

-   `A < B`, `A <= B` : 작음, 작거나 같음

```{r}
5 < 10
5<=10
```

-   `A > B`, `A >= B` :큼, 크거나 같음

```{r}
44>=10
10>35
```

-   `A != B` : 같지 않음

```{r}
10 != 5
```

-   `A & B` : A와 B가 모두 참일 때 `TRUE`를 반환합니다.

```{r}
10 >5 & 25 > 20
```

-   `A | B` : A 또는 B 하나만 참이면 `TRUE`를 반환합니다.

```{r}
10 <5 | 50 > 49
```

### 3) 파이프 연산자

파이프 연산자란 R의 특수한 연산자로, `%` 가 붙은 연산자들을 의미합니다. 대표적인 파이프 연산자는 `%>%` 가 있습니다. 이 연산자를 사용하기 위해선 `magrittr` 패키지가 필요합니다. 단축키는 `ctrl + shift + m` 로 사용할 수 있습니다.

연산자들을 정리하면 아래의 표와 같습니다.

![](images/operators.png){fig-align="center"}

::: callout-tip
## R의 native pipe 연산자 `|>`

기존에 존재하던 `%>%` 는 `magrittr` 패키지를 불러들여와야 사용이 가능했습니다. 하지만 R 4.1 이후로는 기본적으로 `|>` 라는 파이프 연산자를 제공하고 있습니다. 실질적으로 기능은 거의 같기 때문에 원하는 파이프 연산자를 사용하시면 됩니다.
:::

## 5. 데이터 프레임

이번 장에서는 `R`의 데이터 구조 중 가장 많이 활용되는 `data.frame`에 대해 심층적으로 알아보겠습니다.

### 1) 행과 열 선택하기

데이터를 보며 설명하기 전, 데이터프레임에 대해 개념적으로 꼭 알아두어야 할 것이 있습니다. 바로 데이터프레임은 열(column) 중심의 데이터 구조라는 것입니다.

우선 수업 때 사용할 데이터를 불러오겠습니다.

```{r}
# install.packages('NHANES')
library(NHANES)
df <- as.data.frame(NHANES)
```

`df` 라는 이름으로 데이터를 저장하였습니다. `NHANES` 데이터는 `NHANES` 패키지 설치를 통해 사용할 수 있습니다.

데이터프레임은 행/열의 번호나 이름을 통해 그 일부분을 선택할 수 있습니다. R의 데이터프레임은 `데이터프레임이름[row, column]` 형식으로 원하는 데이터에 접근 가능합니다.

#### a. 번호(위치/순서)로 선택하기

```{r}
df[1,]
```

우선 행의 위치(순서)를 활용해 행을 선택할 수 있습니다. 이 때 대괄호 안에 행의 번호를 입력한 뒤, `,`를 찍어주는 것입니다.

여러 행을 선택하기 위해선 `c()`로 묶거나, `:`을 통해 연속적인 행의 번호를 넣어줄 수 있습니다.

```{r}
df[c(1,3,5),] # 1,3,5행 선택
df[1:10,] # 1~10행 선택
```

만약 `,` 없이 숫자만 들어간다면 행을 선택하는 것이 아니라 열을 선택한다는 의미가 됩니다. 따라서 행을 선택하고자 한다면 반드시 `,`를 붙여줘야 합니다.

```{r}
df[c(1,3,5)] # 1,3,5열 선택
```

헷갈리시는 분들은 행을 선택할 때와 마찬가지로 `,`를 사용한 다음에 선택하고자 하는 열의 번호를 선택하면 됩니다.

```{r}
df[,c(1:3,6)]
```

#### b. 이름으로 선택하기

앞서 말씀드린 것처럼 데이터프레임은 column이 중심이 되는 데이터 구조입니다. 따라서 행을 선택하는 일보다는 column을 선택하여 데이터 분석을 진행하는 일이 훨씬 많습니다.

데이터 프레임에서 열을 선택하기 위해서는 앞서 열의 번호를 선택하는 방법도 있습니다. 그러나 모든 열의 위치를 번호로 호출하는 것은 번거로운 일입니다. 따라서 열의 이름으로 호출하는 것이 더욱 쉽고 효율적입니다.

```{r}
df[,'BMI']
```

위처럼 대괄호와 열의 이름을 함께 사용할 수도 있으나, `$` 을 이용해 더욱 쉽게 데이터프레임의 열을 선택할 수 있습니다.

```{r}
df$Gender
```

대괄호보다 `$`가 좋은 점은 [자동완성 기능]{.underline}이 있다는 것입니다. `$` 를 누른 뒤, 제시되는 column들이 떴을 때, 위아래 방향키를 통해 원하는 열의 이름을 선택하기만 하면 됩니다.

#### c. 조건으로 선택하기

앞서 논리 연산자를 통해 특정 조건을 충족하는 행을 선택할 수 있다고 하였습니다.

```{r}
df[df$Gender=='female',]
```

```{r}
df[df$Gender=='male' & df$BPDiaAve>=80,]
```

`[]`안에서 논리 연산자를 통해 특정 column의 조건을 만족하는 행들을 선택할 수 있습니다.

------------------------------------------------------------------------

## 6. 함수

R에는 수많은 함수들이 존재합니다. 수치를 계산하는 함수부터 데이터를 파악하는 함수까지 그 수를 헤아릴 수 없습니다.

이번 장에서는 R을 사용하면서 반드시 알아야 하거나 알아두면 편리한 함수들에 대해 알아보겠습니다.

### 1) 요약 함수

요약 함수란, 숫자형(numeric) 데이터에 대한 계산을 하는 함수들입니다. 대표적인 요약 함수로는 평균, 표준편차, 최소값, 최대값, 중앙값, 합계, 4분위수 등이 있습니다.

```{r}
mean(df$Age) # 평균
sd(df$Age) # 표준편차
min(df$Age) # 최소
max(df$Age) # 최대
median(df$Age)  # 중앙값
quantile(df$Age) # 4분위수

# 중앙값: 
# install.packages('DescTools')
library(DescTools) # or custom function
Mode(df$Age)
```

만약 numeric 데이터에 결측치(`NA`)가 있다면 요약함수를 실행했을 때, NA가 출력됩니다.

```{r}
mean(df$BMI) 
```

따라서 데이터 내에 `NA`가 있는 경우는 요약함수 안에 `na.rm=T`를 넣어줘야 합니다. `NA`를 제외한 나머지 데이터로 요약한 값이 출력됩니다.

```{r}
mean(df$BMI, na.rm=T) 
```

한편, 숫자 데이터 이외에, character, factor 등과 같은 범주형 데이터의 경우 각 범주의 응답 분포를 확인할 수 있습니다. `table()` 함수를 통해 이를 파악할 수 있습니다.

```{r}
table(df$Gender)
```

응답 분포를 확률로 표현할 수 있는 함수는 `prop.table()` 입니다. 이 때, prop.table() 에 넣어줄 인자는 `table()`에 범주를 확인하고자 하는 변수를 넣은 값입니다.

```{r}
prop.table(table(df$Gender))
prop.table(table(df$Gender))*100 # percent 위해 100 곱하기
```

### 2) 데이터프레임 관련 함수

다음으로 데이터프레임과 관련된 함수를 알아보겠습니다. 사실 이 함수들은 데이터프레임뿐만 아니라 벡터나 다른 구조의 데이터들과도 사용되는 함수입니다.

다만 앞으로 우리가 다룰 데이터 구조의 대부분이 데이터프레임이고, 데이터프레임의 활용도가 더 높기 때문에 편의상 데이터프레임 관련 함수라고 지칭하겠습니다.

#### a. 데이터 불러오기/저장하기

`read.csv()` 를 통해 외부 csv 파일을 작업환경으로 불러올 수 있습니다.

```{r}
#| eval: false
#df2 <- read.csv('데이터명.csv')
```

반면 작업환경에서 분석하던 데이터프레임을 외부 csv 파일로 저장할 수 있습니다. `write.csv()` 함수를 통해 가능합니다.

```{r}
#| eval: false
# write.csv(df2,'~/temp.csv') #작업저장경로+파일이름
```

#### b. 데이터 훑어보기

일반적으로 데이터를 분석하기 전, 데이터의 특징을 파악하는 것이 필요합니다. 데이터의 특징을 파악하는 함수들은 `head()`,`tail()`, `str()`, `summary()`등이 있습니다.

```{r}
head(df) # 데이터의 첫 6행을 확인
```

```{r}
tail(df) # 데이터의 마지막 6행을 확인
```

```{r}
str(df) # 데이터의 구조 확인
```

```{r}
summary(df) # 데이터의 column 요약통계량
```

#### c. 행과 열의 수 확인

다음으로 데이터의 행과 열의 개수를 확인하는 함수들입니다.

```{r}
nrow(df) # 행의 개수
ncol(df) # 열의 개수
dim(df) # 데이터의 행과 열의 수 확인
```

::: callout-tip
**object 이름 설정하기**

기존에 선언했던 object 와 동일한 이름으로 새로운 데이터를 저장하게 되면, 기존에 저장되어 있던 값은 사라지게 됩니다.

```{r}
dff <- data.frame(id=c(1,2,3),name=c('a','b','c'));dff
dff <- data.frame(id=c(10,20,30),name=c('A','B','C'));dff
```

따라서 object의 이름을 설정할 때는 헷갈리지 않게끔 다른 이름으로 지어주는 것이 필요합니다.
:::

### 3) 논리 함수

논리 함수는 논리 연산자처럼 `TRUE` 나 `FALSE`를 반환하는 함수입니다.

-   `is.na()` : `NA`가 있는지 확인하는 함수입니다. `NA`가 있는 경우 `TRUE`를, 그렇지 않은 경우를 `FALSE`로 반환합니다.

`is.na()`는 모든 행에 대해 결과를 반환하므로, 보통 `table()` 함수처럼 응답을 요약하여 해당 변수에 몇 개의 결측치가 있는지 확인하기 위해 사용하는 것이 일반적입니다.

```{r}
table(is.na(df$BMI))
```

-   `is.numeric()`, `is.factor()`, `is.character()`: 특정 column의 데이터 유형을 확인하는 함수입니다. 해당 유형이 맞다면 `TRUE`, 아니면 `FALSE`를 반환합니다.

```{r}
is.numeric(15)
is.factor('dd')
is.character('dexmedetomidine')
```

-   `ifelse()` 함수는 `data.frame`에서 가장 많이 쓰이는 함수 중 하나입니다. 그렇기 때문에 매우 중요하고, 반드시 알고 넘어가야 하는 함수입니다. `ifelse()`의 구조는 다음과 같습니다.

```{r}
#| eval: false
ifelse(조건,
       '조건이 참일 때 사용할 값',
       '조건이 거짓일 때 사용할 값')
```

`ifelse()`는 주로 새로운 column을 생성할 때, 또는 기존의 column을 변경할 때 많이 사용됩니다.

```{r}
df$Obesity <- ifelse(df$BMI>=25, 1, 0)
table(df$Obesity)
```

위의 코드에서 `df$BMI>=25`가 조건절에 해당됩니다. `1`은 BMI가 25보다 클 때 비만이라는 의미로 넣는 값이고, `0`은 BMI가 25미만인 경우에 넣어줄 값입니다.

-   또한 `ifelse()`와 `is.na()`를 함께 사용하여 해당 열에 결측치가 있는 경우, 채워넣기 위한 용도로 자주 활용됩니다.

```{r}
df$BMI2 <- ifelse(is.na(df$BMI), 
                 mean(df$BMI, na.rm=T),
                 df$BMI)
summary(df$BMI)
summary(df$BMI2)
```

`BMI2`는 `BMI`와 다르게 `NA`를 `BMI`의 평균으로 채워넣었습니다.

```         
------------------------------------------------------------------------
```

## 7. 셀프 과제

이번 과제는 새로운 데이터를 만들거나, 주어진 과제 데이터를 활용해 문제를 해결하는 과제입니다. 앞으로 R을 사용하면서 가장 많이 쓰이게 될 데이터의 유형과 구조, 그리고 함수들을 익히는 시간을 가져봅시다.

[**변수 설명서**](https://docs.google.com/spreadsheets/d/1JTxiXAtXOVwnmOeIPW1ZYlRAwYmKKjXqtcMx0xTDkiw/edit#gid=556390272 "VOD chapter2 변수설명서")를 참고하여 문제를 해결해봅시다.

### 1) 데이터 준비하기

1-1) 과일의 영어 이름 10개를 포함하는 벡터를 `fruit`으로 선언하세요. (e.g., 사과, 딸기, 바나나, 배, 포도, 귤...)

```{r}

```

1-2) R 함수를 이용해 과제 데이터를 불러옵니다. 파일 경로와 RStudio의 작업 경로가 다르다면 이를 맞춘 뒤, 데이터를 불러오세요.

```{r}

```

------------------------------------------------------------------------

### 2) 데이터 특성 확인하기

2-1. 1-1번 문제에서 만든 `fruit` 의 1\~3번째 값을 출력하세요.

```{r}

```

2-2. 과제 데이터의 구조를 확인하는 함수를 통해 각 column들의 데이터 유형을 확인하세요.

```{r}

```

2-3. 과제 데이터의 변수들을 요약하는 함수를 통해 각 column들의 요약 통계량을 확인하세요.

```{r}

```

2-4. 과제 데이터의 row 수와 column 수를 확인하세요.

```{r}

```

2-5. `fruit`의 첫 6개 값을 출력하세요.

```{r}

```

2-6. 과제 데이터의 첫 6행을 출력하세요.

```{r}

```

------------------------------------------------------------------------

### 3) column 수정하기

3-1. `fruit`의 유형(class)을 `character` 에서 `factor`로 변환하세요.

```{r}

```

3-2. 과제 데이터의 환자 아이디 (`person_id`)를 `integer`에서 `character`로 변환하세요.

```{r}

```

3-3. 과제 데이터의 성별(`sex`)을 `factor`로 변환하세요. 이 때 순서는 Female, Male이 되게끔 설정하세요.

```{r}

```

------------------------------------------------------------------------

### 4) 데이터 요약하기

4-1. 과제 데이터의 나이(`age`)에 대한 평균과 표준편차를 구하세요.

```{r}

```

4-2. 과제 데이터의 수축기 혈압(`sbp`), 이완기혈압(`dbp`) 의 최솟값, 최댓값, 중앙값을 구하세요.

```{r}

```

4-3. 과제 데이터의 성별(`sex`)에 대한 응답 분포 테이블을 만드세요.

```{r}

```

4-4. 과제 데이터의 입원 유형(`admission_disposition`)에 대한 [**응답 분포 확률 테이블**]{.underline}을 만드세요.

```{r}

```

------------------------------------------------------------------------

### 5) 논리 연산자와 논리함수

5-1. 논리 연산자를 이용해 성별이 여성('`Female`')[이고]{.underline} 연령이 30세 미만인 데이터를 출력하세요.

```{r}

```

5-2. `sbp` 가 140 이상 [또는]{.underline} `dbp` 가 90 이상인 데이터를 출력하세요.

```{r}

```

5-3. 수업 시간에 배운 논리 함수를 사용하여 키(`height`)와 몸무게(`weight`)에 결측치(`NA`)가 몇 개가 있는지 확인하세요.

```{r}

```

5-4. 키(`height`)와 몸무게(`weight`) 에 결측치(`NA`)가 있다면 중앙값으로 채워 넣고 나머지는 그대로 두세요.

```{r}

```

------------------------------------------------------------------------

### 6) 새로운 column 만들기

6-1. `sbp`와 `dbp` 를 이용하여 `MAP` column을 만드세요.

-   `MAP`(Mean artery pressure): (2\*`dbp` + `sbp`)/3

```{r}

```

6-2. `ifelse()` 함수를 이용해 고혈압 여부를 판단하는 변수를 만드세요.

-   고혈압 기준: `sbp` 140 이상 [또는]{.underline} `dbp` 90 이상

```{r}

```

6-3. 나이(`age`) column을 이용해 연령대(`age_group`) column을 만드세요

-   연령대: 20대 이하, 30대, 40대, 50대, 60대, 70대 이상

```{r}

```

6-4. 사망일자(`death_date`) column을 이용해 사망 여부 (`death_yn`) column를 만드세요.

-   `death_date`가 `NA`이면 사망하지 않은 것이고, `NA`가 아닌 날짜가 있다면, 사망한 것입니다.

```{r}

```
